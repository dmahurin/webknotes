#!/usr/bin/perl

my($user);
if($<)
{
   $user = getpwuid($<)
}
else
{
   $user = "root";
}

my ($doc_root, $cgi_root, $cgi_root_wpath,
   $user_dir) =
   &chomp_slashs(parse_httpd());
   
$default = ($< && $user ne "www") ? "u" : "r";
   
if(prompt_default("Install in web Root or User directory", $default, "(r|u)") eq "r")
{
   $doc_root = "/home/httpd/html"
      unless(defined($doc_root));
   $cgi_root = "/home/httpd/cgi-bin"
      unless(defined($cgi_root));
   $cgi_root_wpath = "/cgi-bin"
      unless(defined($cgi_root_wpath));
   $doc_root_wpath = "/";
   $private_web_dir = "/home/httpd/private";
}
else
{
   if(defined($user_dir))
   {
      $doc_root = "$ENV{\"HOME\"}/$user_dir";
   }
   else
   {
      $doc_root = "$ENV{\"HOME\"}/public_html";
   }
   undef $cgi_root;
   undef $cgi_root_wpath;
   $doc_root_wpath = "/~$ENV{\"USER\"}";
   $private_web_dir = "$ENV{\"HOME\"}/web_private";
}

unless($cgi_root)
{
   $cgi_root = "$doc_root/cgi-bin";
   $cgi_root_wpath = "$doc_root_wpath/cgi-bin";
}
$webknotes_base = ( $0 =~ m:/[^/]*$: ) ?  $` : ".";

$private_web_dir= prompt_default("Private web data directory", $private_web_dir);
unless(-d $private_web_dir)
{
   if(mkdir($private_web_dir,0755))
   {
      mkdir("$private_web_dir/groups",0755);
      mkdir("$private_web_dir/users",0755);
      mkdir("$private_web_dir/sessions",0755);
   }
   else
   {
      print "Error making directory: $private_web_dir\n";
   }
}

$notes_subpath = "notes";
$notes_dir = prompt_default("Notes file path", "$doc_root/$notes_subpath");
if($notes_dir =~ m:^$doc_root/:)
{
   $in_doc_root=1;
   $notes_subpath = $';
}
$notes_wpath = prompt_default("Notes web path", "$doc_root_wpath/$notes_subpath");

mkdir($doc_root,0755) if ($in_doc_root);
if( ! -d $notes_dir )
{
   if(prompt_default("Create directory", "y", "(y|n)") eq "y")
   {
      print "Error creating director\n" unless(mkdir($notes_dir,0755));
      if(prompt_default("Copy sample notes", "y", "(y|n)") eq "y")
      {
	 system("cp -r '$webknotes_base/sample_notes'/* $notes_dir");
      }
   }
}

$icon_subpath = "icons";
$theme_subpath = "themes";
$icons_dir = prompt_default("Icons file path", "$doc_root/$icon_subpath");
if($icons_dir =~ m:^$doc_root/:)
{
   $in_doc_root=1;
   $icon_subpath = $';
   if($icon_subpath =~ m:/icons:)
   {      
      $theme_subpath = $`;
   }
}
$icons_wpath = prompt_default("Icons web path", "$doc_root_wpath/$icon_subpath");

$themes_dir = prompt_default("Themes file path", "$doc_root/$theme_subpath");
if($themes_dir =~ m:^$doc_root/:)
{
   $in_doc_root=1;
   $theme_subpath = $';
}
$themes_wpath = prompt_default("Themes web path", "$doc_root_wpath/$theme_subpath");


mkdir($doc_root,0755) if ($in_doc_root);
if(prompt_default("Copy sample icons", ( -d $icons_dir )? "n" : "y",
   "(y|n)") eq "y")
{
   mkdir($icons_dir,0755);
   system("cp -r '$webknotes_base/icons'/* $icons_dir");
}

if(prompt_default("Copy sample themes", ( -d $themes_dir )? "n" : "y",
   "(y|n)") eq "y")
{
   mkdir($themes_dir,0755);
   system("cp -r '$webknotes_base/themes'/* $themes_dir");
}

$wkn_cgi_subpath = "wkn";
$wkn_cgi_dir = prompt_default("webknotes cgi-bin directory", "$cgi_root/$wkn_cgi_subpath");
if($wkn_cgi_dir =~ m:^$cgi_root/:)
{
   $in_cgi_root = 1;
   $wkn_cgi_subpath = $';
}
$wkn_cgi_wpath = prompt_default("webknotes cgi-bin web path", "$cgi_root_wpath/$wkn_cgi_subpath");

mkdir($cgi_root,0755) if ($in_cgi_root);
mkdir($wkn_cgi_dir, 0755);

if(prompt_default("Copy webknotes cgi-bin", "y", "(y|n)") eq "y")
{
   system("cp -r $webknotes_base/cgi-bin/* $wkn_cgi_dir");

   if(prompt_default("Set Setuid on scripts", "y", "(y|n)") eq "y")
   {
      system("chmod a+x,u+s $wkn_cgi_dir/*.cgi");
   }
}


$default = ( -f "$wkn_cgi_dir/auth_define.pl" ) ? "n" : "y";

if(prompt_default("Create configuration files", $default, "(y|n)") eq "y")
{
   
   
   unlink("$wkn_cgi_dir/auth_define.pl");
   if(open(FILE, ">$wkn_cgi_dir/auth_define.pl"))
   {
      print FILE
"#!/usr/bin/perl

package auth::define;

\$private_dir = \"$private_web_dir\";
\$doc_dir = \"$notes_dir\";
\$doc_wpath = \"$notes_wpath\";

\$path_permissions = { \"\" => \"+rn\"};

1;
";
      close FILE;
   }
   
   $admin_user = $< ? getpwuid($<) : "admin";
   $default = ( -f "$private_web_dir/users/$admin_user" ) ? "n" : "y";
   if(prompt_default("Create Admin login as '$admin_user'", $default, "(y|n)") eq "y")
   {
      while(1)
      {
         system "stty -echo";
         $admin_password = prompt_default("Admin Password", "");
         print "\n";
         $admin_password_check = prompt_default("Admin Password (verify)", "");
         print "\n";
         system "stty echo";
         if($admin_password ne $admin_password_check)
         {
            print "Passwords did not match. Try again\n";
         }
         else { last };
      }
      push(@INC, "$wkn_cgi_dir/$cgi_subpath");
      require "auth_lib.pl";
      if(! auth::write_user_info($admin_user,
         { "PassKey"=>auth::pcrypt1($admin_password),
         "AuthPath"=>'/',
         "Permissions"=>'rncmds',
         "Name"=>"Admin"}))
      {
         print "Error creating admin.\n";
      }
   }

   unlink("$wkn_cgi_dir/wkn_define.pl");
   if(open(FILE, ">$wkn_cgi_dir/wkn_define.pl"))
   {
      print FILE
"package wkn::define;
\$icons_wpath = \"$icons_wpath\"; 
\$themes_wpath = \"$themes_wpath\";
\$themes_dir = \"$themes_dir\";" , 
'
$default_layout = "table";
$default_theme = "don";
$frames_mode = "table";

$max_depth = 3;

$opened_icon = "fminus.gif";
$opened_icon_text = "[-]";
$closed_icon = "fplus.gif";
$closed_icon_text = "[+]";
$dir_icon = "folder.gif";
$dir_icon_text = "[+]";
$file_icon = "document.gif";
$file_icon_text = "[.]";
';
      close FILE;
   }
}


sub prompt_default
{
   my($prompt, $default, $choices) = @_;
      
   print "$prompt $choices [$default]: ";
   $line = <STDIN>;
   chomp($line);
   $line = $default if($line eq "");
   
   return $line;
}


sub parse_httpd
{

   my($line, $doc_root, $script_root, $script_alias, $user_dir);
   
   for $conf ( "/etc/httpd/conf/httpd.conf", "/etc/httpd/conf/srm.conf" )
   {
      next unless(open( HCONF, $conf));
      while(defined($line = <HCONF>))
      {
         if($line =~ m:^\s*DocumentRoot\s+:)
         {
            ($doc_root) = split_args($');
         }
         if($line =~ m:^\s*ScriptAlias\s+:)
         {
            ($script_alias, $script_root) = split_args($');
         }
         if($line =~ m:^\s*UserDir\s+:)
         {
            ($user_dir) = split_args($');
         }
      }
      close(HCONF);
   }
   if(!defined($doc_root))
   {                             
      print "Warning: http configuration not found\n";
   }
   return ($doc_root, $script_root, $script_alias, $user_dir);
}

sub split_args
{
   my($line) = @_;
   my(@args) = ();
   while($line =~ m:^\s*\"([^\"]*)\"|([^\"\s]+)\s*:)
   {
      push(@args, $1) if(defined($1));
      push(@args, $1) if(defined($2));
      $line = $';
   }
   return (@args);
}

sub chomp_slashs
{
   my(@paths);
   foreach(@_)
   {
      $_ =~ s:/+$::;
      push( @paths, $_);
   }
   return(@paths);
}
